srv:
  questions:
  - srv
  - srv ?
  references:
  - srv-address
srv-address:
  questions:
  - What is srv address ?
  - What is srv uri ?
  answers:
  - TODO
projections:
  questions:
  - How to add projection ?
  references:
  - projections-java
projections-java:
  questions:
  - How to add projection in java ?
  answers:  |

    import com.mongodb.client.model.Projections;
    import org.bson.conversions.Bson;

    Bson projection = Projections.include("title");
    List<Document> movies = new ArrayList<>();
    moviesCollection
                .find(queryFilter)
                .projection(projection)
                .iterator()
                .forEachRemaining(movies::add);

  links:
  - https://docs.mongodb.com/manual/tutorial/project-fields-from-query-results/
cursor-methods-appended-order:
  questions:
  - Does order how cursor methods are appended is important ?
  - Does the order of appending cursor methods impact results ?
  references:
  - cursor-methods-appended-order-aggregates
  - cursor-methods-appended-order-find
cursor-methods-appended-order-aggregates:
  questions:
  - Does order how cursor methods are appended in aggregation stages is important ?
  - Does the order of appending cursor methods in aggregation stages impact results ?
  answers: "Yes"
cursor-methods-appended-order-find:
  questions:
    - Does order how cursor methods are appended in find operation is important ?
    - Does order how cursor methods are appended in find iterable is important ?
    - Does the order of appending cursor methods in find operation impact results ?
    - Does the order of appending cursor methods in find iterable impact results ?
  answers: "No"
upsert-what-is-it:
  questions:
    - What is upsert operation ?
  answers:  |
    The upsert feature is situation when we try to update object but in case when object does not exists it is being inserted.
    This feature is not only limited for mongodb. The lion share of SQL databases have also such feture.
  links:
    - https://docs.mongodb.com/manual/reference/method/db.collection.update/#update-upsert
lookup-what-is-it:
  questions:
    - What is lookup ?
  answers:  |
    It is aggreagtion stage which fetch results from other unshared collection to result output.
    Performs a left outer join to an unsharded collection in the same database to filter in documents from the “joined” collection for processing.
    Examples:
    //java
        public Post findAndFetchComments(ObjectId oid) {

            List<Bson> pipeline = new ArrayList<Bson>();
            pipeline.add(Aggregates.match(Filters.eq("_id", oid)));
            pipeline.add(Aggregates.lookup(DaoProperties.COMMENTS_COLLECTION_NAME, "_id", COMMENTS_POSTS_ID_COLLUMN_NAME, "comments"));

            AggregateIterable<Post> results = collection.aggregate(pipeline);
            return results.first();
        }

        public Document getMovie(String movieId) {
            if (!validIdValue(movieId)) {
                return null;
            }


            AggregateIterable<Document> results = moviesCollection.aggregate(Arrays.asList(new Document("$match",
                            new Document("_id",
                                    new ObjectId(movieId))),
                    new Document("$lookup",
                            new Document("from", "comments")
                                    .append("let",
                                            new Document("m_id", "$_id"))
                                    .append("pipeline", Arrays.asList(new Document("$match",
                                                    new Document("$expr",
                                                            new Document("$eq", Arrays.asList("$movie_id", "$$m_id")))),
                                            new Document("$sort",
                                                    new Document("date", -1L))))
                                    .append("as", "comments"))));

            Document movie = results.first();
            return movie;
        }
  links:
    - https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/
recoverable-exceptions:
  questions:
    - Which exceptions should be considered recoverable ?
    - After which exception we should retry the operation ?
  answers:  |
  com.mongodb.MongoException
    com.mongodb.MongoClientException
      com.mongodb.MongoConfigurationException --> No. An exception indicating a configuration error in the client.
      com.mongodb.MongoSecurityException --> No. This exception is thrown when there is an error reported by the underlying client authentication mechanism.
      com.mongodb.MongoTimeoutException --> Yes. An exception indicating that the driver has timed out waiting for either a server or a connection to become available.
      MongoWaitQueueFullException --> Yes. An exception indicating that the queue for waiting for a pooled connection is full.
    com.mongodb.MongoExecutionTimeoutException --> Yes. Exception indicating that the execution of the current operation timed out as a result of the maximum operation time being exceeded.
    com.mongodb.MongoInternalException --> No, not sure. A Mongo exception internal to the driver, not carrying any error code.
    com.mongodb.MongoInterruptedException --> Yes, not sure, dependeds on java and framework and if code executes "Thread.currentThread().interrupt()", A non-checked exception indicating that the driver has been interrupted by a call to Thread.interrupt.
    com.mongodb.MongoServerException
      com.mongodb.BulkWriteException --> No, not necessary. An exception that represents all errors associated with a bulk write operation.
      com.mongodb.MongoBulkWriteException --> No, not necessary. An exception that represents all errors associated with a bulk write operation.
      com.mongodb.MongoCommandException --> Yes. An exception indicating that a command sent to a MongoDB server returned a failure.
      com.mongodb.MongoNodeIsRecoveringException --> Yes. An exception indicating that the server is a member of a replica set but is in recovery mode, and therefore refused to execute the operation. This can happen when a server is starting up and trying to join the replica set.
      com.mongodb.MongoNotPrimaryException --> Yes. An exception indicating that the server is a member of a replica set but is not the primary, and therefore refused to execute either a write operation or a read operation that required a primary. This can happen during a replica set election.
      com.mongodb.MongoQueryException
        com.mongodb.MongoCursorNotFoundException --> No, not sure
      com.mongodb.MongoWriteConcernException --> No, not sure. An exception indicating a failure to apply the write concern to the requested write operation
      com.mongodb.MongoWriteException --> No, not sure. An exception indicating the failure of a write operation.
      com.mongodb.WriteConcernException --> No, not sure. An exception representing an error reported due to a write failure.
        com.mongodb.DuplicateKeyException --> No. Subclass of WriteConcernException representing a duplicate key exception
    com.mongodb.MongoSocketException
      com.mongodb.MongoSocketClosedException --> Yes. This exception is thrown when trying to read or write from a closed socket.
      com.mongodb.MongoSocketOpenException --> Yes. This exception is thrown when there is an exception opening a Socket.
      com.mongodb.MongoSocketReadException --> Yes. This exception is thrown when there is an exception reading a response from a Socket.
      com.mongodb.MongoSocketReadTimeoutException --> Yes. This exception is thrown when there is a timeout reading a response from the socket.
      com.mongodb.MongoSocketWriteException --> Yes. This exception is thrown when there is an exception writing a response to a Socket.

  links:
    - https://mongodb.github.io/mongo-java-driver/3.7/javadoc/com/mongodb/MongoException.html
what-is-bulk-writes:
  questions:
    - What is bulk writes ?
  answers:  |
      MongoDB provides clients the ability to perform write operations in bulk.
      Bulk write operations affect a single collection.
      MongoDB allows applications to determine the acceptable level of acknowledgement required for bulk write operations.
  links:
    - https://docs.mongodb.com/manual/core/bulk-write-operations/
what-are-types-of-bulk-writes:
  questions:
    - What are types of bulk writes ?
  answers:  |
    Bulk write operations can be either ordered or unordered.
  links:
    - https://docs.mongodb.com/manual/core/bulk-write-operations/
what-is-bulk-ordered-write:
  questions:
    - What is bulk ordered write ?
  answers:  |
    With an ordered list of operations, MongoDB executes the operations serially.
    If an error occurs during the processing of one of the write operations, MongoDB will return without processing any remaining write operations in the list.
  links:
    - https://docs.mongodb.com/manual/core/bulk-write-operations/
can-where-used-in-math:
  questions:
    - Can the where used in match ?
    - Can the $where used in $match ?
  answers:  "No"
create-database:
  questions:
    - How to create database ?
  references:
    - create-database-js
create-database-js:
  questions:
    - How to create database in javascript ?
  answers:  |
    To create a database in MongoDB, start by creating a MongoClient object, then specify a connection URL with the correct ip address and the name of the database you want to create.
    MongoDB will create the database if it does not exist, and make a connection to it.
    Example:
    var MongoClient = require('mongodb').MongoClient;
    var url = "mongodb://localhost:27017/mydb";

    MongoClient.connect(url, function(err, db) {
      if (err) throw err;
      console.log("Database created!");
      db.close();
    });
  links:
    - https://www.w3schools.com/nodejs/nodejs_mongodb_create_db.asp
how-to-check-if-array-contains-all-elements:
  questions:
    - How to check if array contains all elements ?
    - How to check if array contains all elements in query ?
    - How to check if array contains all elements in aggregation ?
  answers:  |
    Use $all operator, for example:
    For array "language" check if there are documents that contains languages English and Spanish.
    var result = await matchCollection.aggregate([{ $match: { languages: { $all: [ "English" , "Spanish" ]} }}
                                                    ]).toArray();
  links:
    - https://docs.mongodb.com/manual/reference/operator/query/all/
how-to-check-if-array-contains-at-least-one-element:
  questions:
    - How to check if array contains at least one of elements ?
    - How to check if array contains one of elements ?
  answers:  |
    Use $in operator, for example:
    For array "language" check if there are documents that do not contains languages Germany or Spanish.
    var result = await matchCollection.aggregate([{ $match: { "languages": { $not: { $in: ["Spanish", "Germany"] } } }}
                                                    ]).toArray();
  links:
    - https://docs.mongodb.com/manual/reference/operator/aggregation/in/
    - https://docs.mongodb.com/manual/reference/operator/query/in/
how-to-check-if-array-does-not-contains-any-of-one-elements:
  questions:
    - How to check if array does not contains any of of elements ?
  answers:  |
    Use $nin operator, for example:
    For array "language" check if there are documents that do not contains languages Germany or Spanish.
    var result = await matchCollection.aggregate([{ $match: { "languages": { $nin: ["Spanish", "Germany"] } }}
                                                    ]).toArray();
  links:
    - https://docs.mongodb.com/manual/reference/operator/query/nin/
how-to-add-additional-field-to-projection:
  questions:
    - How to add additional field to project ?
    - How to add additional field to aggregation results ?
    - How to add additional field to query results ?
    - How to add field to project ?
    - How to add field to query results ?
  answers:  |
    Use $addFields operator, for example:
    For final output add field numberOfWords that contains number of words from field description
    var result = await matchCollection.aggregate([{ $match: { _id: {$exists: true} }},
                                                    {$addFields: { numberOfWords: {$size: { $split: [ "$description", " " ] } } }}
                                                      ]).toArray();
  links:
    - https://docs.mongodb.com/manual/reference/operator/aggregation/addFields/
how-to-count-number-of-elements-for-array:
  questions:
    - How to count number of elements in array ?
    - How to count number of elements for array ?
    - How to count how many elements are in array ?
  answers:  |
    Use $size operator, for example:
    For the below example the $size operator count number of elements in the array that contains words split by operator $split based on value for field the description
    var result = await matchCollection.aggregate([{ $match: { _id: {$exists: true} }},
                                                    {$addFields: { numberOfWords: {$size: { $split: [ "$description", " " ] } } }}
                                                      ]).toArray();
  links:
    - https://docs.mongodb.com/manual/reference/operator/aggregation/size/